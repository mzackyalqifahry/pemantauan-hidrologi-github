<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Pemantauan Hidrologi - HC-SR04</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      background: #f0f4f8;
    }
    h1 {
      text-align: center;
      color: #1e3a8a;
    }
    .dashboard {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-bottom: 20px;
    }
    .card {
      background: white;
      border-radius: 10px;
      padding: 15px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      flex: 1;
      min-width: 250px;
    }
    .card h2 {
      margin-top: 0;
      color: #1e3a8a;
      font-size: 1.2em;
    }
    .status {
      font-size: 1.5em;
      font-weight: bold;
      text-align: center;
      padding: 10px;
      border-radius: 5px;
      margin: 10px 0;
    }
    .status-aman { background-color: #e6f7e6; color: green; }
    .status-siaga { background-color: #fff3e6; color: orange; }
    .status-bahaya { background-color: #ffebee; color: red; }
    .sensor-value {
      font-size: 1.8em;
      font-weight: bold;
      text-align: center;
      margin: 10px 0;
      color: #1e3a8a;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
      background: white;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    th, td {
      padding: 12px;
      border-bottom: 1px solid #ddd;
      text-align: center;
    }
    canvas {
      margin-top: 30px;
      background: white;
      padding: 10px;
      border-radius: 10px;
      width: 100%;
    }
    .last-update {
      text-align: right;
      font-size: 0.9em;
      color: #666;
      margin-bottom: 10px;
    }
    .sensor-info {
      display: flex;
      justify-content: space-between;
      margin-top: 15px;
    }
    .sensor-info div {
      text-align: center;
      flex: 1;
    }
    .controls {
      text-align: right;
      margin: 10px 0;
    }
    .controls button {
      padding: 8px 15px;
      border: none;
      border-radius: 6px;
      background: #1e3a8a;
      color: white;
      font-size: 0.9em;
      cursor: pointer;
      transition: background 0.3s;
    }
    .controls button:hover {
      background: #2563eb;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Sistem Pemantauan Hidrologi dengan HC-SR04</h1>
    <div class="last-update" id="last-update">Terakhir diperbarui: -</div>
    <div class="controls">
      <button id="manual-update">Update Sekarang</button>
    </div>
    
    <div class="dashboard">
      <div class="card">
        <h2>Status Ketinggian Air</h2>
        <div id="current-status" class="status status-aman">-</div>
        <div class="sensor-value">
          <span id="current-water-level">-</span> cm
        </div>
        <div class="sensor-info">
          <div>Jarak Sensor: <span id="current-distance">-</span> cm</div>
          <div>Tinggi Tangki: 250 cm</div>
        </div>
      </div>
      
      <div class="card">
        <h2>Informasi Sensor</h2>
        <div>Jenis: HC-SR04 Ultrasonic</div>
        <div>Akurasi: Â±3mm</div>
        <div>Range: 2-400cm</div>
        <div style="margin-top: 15px;">
          <strong>Threshold:</strong><br>
          Aman: &lt;150cm<br>
          Siaga: 150-180cm<br>
          Bahaya: &gt;180cm
        </div>
      </div>
    </div>

    <table>
      <thead>
        <tr>
          <th>Waktu</th>
          <th>Tinggi Air (cm)</th>
          <th>Jarak Sensor (cm)</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody id="data-table">
        <!-- Data akan diisi JavaScript -->
      </tbody>
    </table>

    <canvas id="waterChart" height="200"></canvas>
  </div>

  <script>
    // Interval update (1 menit = 60000 ms)
    const interval = 60000;

    let waterData = [];
    let chart;

    function initChart() {
      const ctx = document.getElementById('waterChart').getContext('2d');
      chart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: [],
          datasets: [
            {
              label: 'Tinggi Air (cm)',
              data: [],
              backgroundColor: 'rgba(59, 130, 246, 0.2)',
              borderColor: 'rgba(37, 99, 235, 1)',
              borderWidth: 2,
              tension: 0.4,
              fill: true,
              yAxisID: 'y'
            },
            {
              label: 'Jarak Sensor (cm)',
              data: [],
              backgroundColor: 'rgba(255, 159, 64, 0.2)',
              borderColor: 'rgba(255, 159, 64, 1)',
              borderWidth: 2,
              tension: 0.4,
              fill: false,
              yAxisID: 'y1'
            }
          ]
        },
        options: {
          responsive: true,
          scales: {
            y: { type: 'linear', display: true, position: 'left', title: { display: true, text: 'Tinggi Air (cm)' }, max: 250, min: 0 },
            y1: { type: 'linear', display: true, position: 'right', title: { display: true, text: 'Jarak Sensor (cm)' }, max: 250, min: 0, grid: { drawOnChartArea: false } },
            x: { title: { display: true, text: 'Waktu' } }
          }
        }
      });
    }

    function updateDisplay(data) {
      document.getElementById('current-status').textContent = data.status;
      document.getElementById('current-status').className = `status status-${data.status.toLowerCase()}`;
      document.getElementById('current-water-level').textContent = data.tinggi.toFixed(1);
      document.getElementById('current-distance').textContent = data.jarak.toFixed(1);
      
      const tbody = document.getElementById('data-table');
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${data.waktu}</td>
        <td>${data.tinggi.toFixed(1)}</td>
        <td>${data.jarak.toFixed(1)}</td>
        <td class="status-${data.status.toLowerCase()}">${data.status}</td>
      `;
      tbody.insertBefore(row, tbody.firstChild);
      if (tbody.children.length > 10) tbody.removeChild(tbody.lastChild);
      
      waterData.push(data);
      if (waterData.length > 20) waterData.shift();
      chart.data.labels = waterData.map(d => d.waktu);
      chart.data.datasets[0].data = waterData.map(d => d.tinggi);
      chart.data.datasets[1].data = waterData.map(d => d.jarak);
      chart.update();
      
      const now = new Date();
      document.getElementById('last-update').textContent = `Terakhir diperbarui: ${now.toLocaleString()}`;
    }

    function simulateData() {
      const now = new Date();
      const timeStr = now.getHours().toString().padStart(2, '0') + ':' + 
                     now.getMinutes().toString().padStart(2, '0');
      const distance = 20 + Math.random() * 100;
      const waterLevel = 250 - distance;
      
      let status;
      if (waterLevel < 150) status = "Aman";
      else if (waterLevel < 180) status = "Siaga";
      else status = "Bahaya";
      
      return { waktu: timeStr, tinggi: waterLevel, jarak: distance, status: status };
    }

    async function connectToArduino() {
      try {
        const port = await navigator.serial.requestPort();
        await port.open({ baudRate: 9600 });
        const reader = port.readable.getReader();
        while (true) {
          const { value, done } = await reader.read();
          if (done) break;
          try {
            const text = new TextDecoder().decode(value);
            const data = JSON.parse(text);
            updateDisplay(data);
          } catch (e) { console.error("Error parsing data:", e); }
        }
      } catch (err) {
        console.log("Serial connection error:", err);
        setInterval(() => { updateDisplay(simulateData()); }, interval);
      }
    }

    initChart();

    // Tombol update manual
    document.getElementById('manual-update').addEventListener('click', () => {
      updateDisplay(simulateData());
    });

    if ('serial' in navigator) {
      document.getElementById('last-update').textContent += " (Koneksi Serial)";
      connectToArduino();
    } else {
      document.getElementById('last-update').textContent += " (Mode Simulasi)";
      setInterval(() => { updateDisplay(simulateData()); }, interval);
    }
  </script>
</body>
</html>
